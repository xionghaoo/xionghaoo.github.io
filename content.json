{
  "meta": {
    "title": "Xiong Hao's Notes",
    "subtitle": "be a geek",
    "description": null,
    "author": "Xiong Hao",
    "url": "http://xionghaoo.github.io"
  },
  "pages": [
    {
      "title": "",
      "date": "2017-11-05T01:20:24.547Z",
      "updated": "2017-11-05T01:20:24.547Z",
      "comments": true,
      "path": "about/index.html",
      "permalink": "http://xionghaoo.github.io/about/index.html",
      "excerpt": "",
      "text": "About Me A android aficionado"
    }
  ],
  "posts": [
    {
      "title": "GreenDao数据库升级",
      "slug": "GreenDao数据库Upgrade",
      "date": "2017-09-28T12:11:16.082Z",
      "updated": "2017-11-05T07:28:18.941Z",
      "comments": true,
      "path": "2017/09/28/GreenDao数据库Upgrade/",
      "link": "",
      "permalink": "http://xionghaoo.github.io/2017/09/28/GreenDao数据库Upgrade/",
      "excerpt": "",
      "text": "在App更新的过程中，不免需要升级数据库，重建或修改表结构，但是GreenDao并没有提供相应的数据库升级方法，观察GreenDao生成的DaoMaster类，可以找到解决办法。 GreenDao中数据库版本不可修改，在编译生成的DaoMaster类中，可以看到，SCHEMA_VERSION固定为1。123456789101112131415161718192021222324252627282930313233343536373839public class DaoMaster extends AbstractDaoMaster &#123; public static final int SCHEMA_VERSION = 1; ... public static abstract class OpenHelper extends DatabaseOpenHelper &#123; public OpenHelper(Context context, String name) &#123; super(context, name, SCHEMA_VERSION); &#125; public OpenHelper(Context context, String name, CursorFactory factory) &#123; super(context, name, factory, SCHEMA_VERSION); &#125; @Override public void onCreate(Database db) &#123; Log.i(\"greenDAO\", \"Creating tables for schema version \" + SCHEMA_VERSION); createAllTables(db, false); &#125; &#125; public static class DevOpenHelper extends OpenHelper &#123; public DevOpenHelper(Context context, String name) &#123; super(context, name); &#125; public DevOpenHelper(Context context, String name, CursorFactory factory) &#123; super(context, name, factory); &#125; @Override public void onUpgrade(Database db, int oldVersion, int newVersion) &#123; Log.i(\"greenDAO\", \"Upgrading schema from version \" + oldVersion + \" to \" + newVersion + \" by dropping all tables\"); dropAllTables(db, true); onCreate(db); &#125; &#125;&#125; GreenDao初始化:123DaoMaster.DevOpenHelper helper = new DaoMaster.DevOpenHelper(this, ENCRYPTED ? \"fpc-db-encrypted\" : \"fpc-db\");db = ENCRYPTED ? helper.getEncryptedWritableDb(\"super-secret\") : helper.getWritableDb();daoSession = new DaoMaster(db).newSession(); 如果使用自带的DevOpenHelper，那么生成的数据库版本固定为SCHEMA_VERSION = 1，数据库永远不会升级。 要想升级数据库版本从而触发onUpgrade方法，需要自定义一个OpenHelper，继承org.greenrobot.greendao.database.DatabaseOpenHelper，代码如下:123456789101112131415161718192021222324252627282930...import org.greenrobot.greendao.database.DatabaseOpenHelper;public class GreenOpenHelper extends DatabaseOpenHelper &#123; public static int DB_VERSION = BuildConfig.VERSION_CODE; public GreenOpenHelper(Context context, String name) &#123; super(context, name, DB_VERSION); &#125; public GreenOpenHelper(Context context, String name, SQLiteDatabase.CursorFactory factory) &#123; super(context, name, factory, DB_VERSION); &#125; @Override public void onCreate(Database db) &#123; Log.i(\"greenDAO\", \"Creating tables for schema version \" + DB_VERSION); DaoMaster.createAllTables(db, false); &#125; @Override public void onUpgrade(Database db, int oldVersion, int newVersion) &#123; Log.i(\"greenDAO\", \"Upgrading schema from version \" + oldVersion + \" to \" + newVersion + \" by dropping all tables\"); if (newVersion &gt; oldVersion) &#123; DaoMaster.dropAllTables(db, true); onCreate(db); &#125; &#125;&#125; 注意， DatabaseOpenHelper继承android.database.sqlite.SQLiteOpenHelper，需要将数据库版本写入SQLiteOpenHelper的构造器才能生效 我们使用GreenOpenHelper替代DaoMaster.DevOpenHelper，初始化代码现在变为:123GreenOpenHelper helper = new GreenOpenHelper(this, ENCRYPTED ? \"fpc-db-encrypted\" : \"fpc-db\");db = ENCRYPTED ? helper.getEncryptedWritableDb(\"super-secret\") : helper.getWritableDb();daoSession = new DaoMaster(db).newSession(); 现在我们可以用BuildConfig.VERSION_CODE来控制数据库版本，需要升级数据库时在build.gradle(app模块)修改versionCode就可以了。",
      "categories": [
        {
          "name": "Android",
          "slug": "Android",
          "permalink": "http://xionghaoo.github.io/categories/Android/"
        }
      ],
      "tags": []
    },
    {
      "title": "Sublime3 安装配置(Ubuntu16.04)",
      "slug": "Sublime3 安装配置",
      "date": "2017-09-28T11:22:13.946Z",
      "updated": "2017-11-05T07:33:25.945Z",
      "comments": true,
      "path": "2017/09/28/Sublime3 安装配置/",
      "link": "",
      "permalink": "http://xionghaoo.github.io/2017/09/28/Sublime3 安装配置/",
      "excerpt": "",
      "text": "系统环境Ubuntu16.04 Sublime3安装官网下载地址: Sublime Text3 Download Sublime3官方提供的是永久使用版，要想获取完整版需要破解，下面是注册码获取地址: Sublime Text 3 3126 注册码 Sublime3环境配置 1、安装Package Control Package Control是Sublime的插件包控制器，只有通过它才可以安装其他插件 安装Package Control可以依照官网的教程:https://packagecontrol.io/installation Package Control Install 安装好Package Control之后应该可以看到Preferences选项下多出了一个Package Control，选择打开Package Control的面板。在里面输入Install Package。Sublime就开始寻找可用的插件包了。安装完成后我们就可以安装各种插件了。 这里安装如果出现问题，请继续往下看，如果没有问题，可以跳过看第二点设置Sublime中文输入法。比如出现 There are no packages available for installation 的错误信息，这里我们要寻找下错误来源，打开设置里面的Debug开关。 Preferences &gt; Package Settings &gt; Package Control &gt; Settings – User Settings-user file:1234567891011121314151617&#123; \"bootstrapped\": true, \"debug\": true, \"http_proxy\": \"http://localhost:8123\", \"https_proxy\": \"https://localhost:8123\", \"in_process_packages\": [ ], \"installed_packages\": [ \"GBK Support\", \"LiveReload\", \"MarkdownEditing\", \"OmniMarkupPreviewer\", \"Package Control\" ]&#125; 设置debug为true之后，在sublime编辑窗口按ctrl + ~ 会弹出debug界面。如果出现类似下面这种错误。那么可能是需要设置代理，因为sublime.wbond.net网址需要翻墙才能访问。代理设置也是在上述Settings-user文件中，这里是http代理，如果你用的是shadowsocks sock5代理，那么需要进行转换，转换方法请参考: 为终端设置Shadowsocks代理 123Package Control: Error downloading channel. URL error _ssl.c:480: error:140770FC:SSL routines:SSL23_GET_SERVER_HELLO:unknown protocol downloading https://sublime.wbond.net/repositories.json.error: Package Control: There are no packages available for installation. 2、设置Sublime中文输入法 Sublime默认不支持Fcitx中文输入，无法在其编辑页面调出中文输入法 更新系统到最新sudo apt-get update &amp;&amp; sudo apt-get upgrade Clone github projectgit clone https://github.com/lyfeyaj/sublime-text-imfix.git 运行脚本cd sublime-text-imfix &amp;&amp; ./sublime-imfix 运行完脚本后需要注销重新登录系统。 参考链接 解决ubuntu16.04下的sublime text3不能使用Fcitx下的搜狗输入法的问题 3、设置Sublime字体选择 Preferences &gt; settings 1234567891011&#123; \"color_scheme\": \"Packages/MarkdownEditing/MarkdownEditor-Focus.tmTheme\", \"font_face\": \"Inconsolata\", \"font_size\": 14, \"ignored_packages\": [ \"Vintage\" ], \"line_padding_bottom\": 1, \"line_padding_top\": 1&#125; 字体最好选monospaced font，参考链接:在Sublime Text里有助编码的简单视觉改善 参考资料在安装和配置好Sublime之后，就可以下载自己喜欢的插件了，我主要是用来写博客，所以暂时只安装了MarkDown相关的插件，下面有相关链接:Sublime Text 3 Markdown",
      "categories": [
        {
          "name": "Miscellaneous",
          "slug": "Miscellaneous",
          "permalink": "http://xionghaoo.github.io/categories/Miscellaneous/"
        }
      ],
      "tags": []
    },
    {
      "title": "中间点圆算法",
      "slug": "MidPoint Circle Algorithm",
      "date": "2017-09-28T11:22:13.927Z",
      "updated": "2017-11-05T07:31:22.114Z",
      "comments": true,
      "path": "2017/09/28/MidPoint Circle Algorithm/",
      "link": "",
      "permalink": "http://xionghaoo.github.io/2017/09/28/MidPoint Circle Algorithm/",
      "excerpt": "",
      "text": "中间点圆算法是计算机绘制圆形的一种算法。下面是一个实际的Demo。 中间点算法画圆github - MidPointCircleExplained 原理计算机画圆必须以像素为单位，因此不能直接使用圆的公式x^2 + y^2 = r^2。x和y必须为整数，如下图，设图中的圆点坐标都为整数，圆的轨迹落在两个点S和T之间，这时候计算机在绘制圆的路径时，必须选择S或T其中一个点作为绘制点。那计算机会选择哪个点呢？这时计算机会计算这两个点相对圆心的距离与圆的半径的误差。选择误差小的作为绘制点。 如何判断这种误差呢？我们选择S和T的中点记为M(x1 - 1/2, y1 + 1)。现在只需要判断M点与圆的位置关系就可以了，如果M点在圆内或圆上，那么选S点，反之，如果M点在圆外，那么选T点。我称M点为点(x1, y1)的决策点。 设点(0, r)为计算起点。1(x0, y0) = (0, r) 下面我们通过公式找出决策点与实际选取点之间的关系。123456f(x, y) = x^2 + y^2 - r^2 = 0f(xi - 1/2 + e, yi + 1) = (xi - 1/2 + e)^2 + (yi + 1)^2 - r^2 = (xi- 1/2)^2 + (yi + 1)^2 - r2 + 2(xi - 1/2)e + e^2 = f(xi - 1/2, yi + 1) + 2(xi - 1/2)e + e^2 = 0 123456789101112131415161718192021设 di = f(xi - 1/2, yi + 1) = -2(xi - 1/2)e - e^2因此,如果 e &lt; 0 那么 di &gt; 0 因此选取点 S = (xi - 1, yi + 1).di+1 = f(xi - 1 - 1/2, yi + 1 + 1) = ((xi - 1/2) - 1)^2 + ((yi + 1) + 1)^2 - r^2 = di - 2(xi - 1) + 2(yi + 1) + 1 = di + 2(yi + 1 - xi + 1) + 1 如果 e &gt;= 0 那么 di &lt;= 0 因此选取点 T = (xi, yi + 1) di+1 = f(xi - 1/2, yi + 1 + 1) = di + 2yi+1 + 1 di的初始值为 d0 = f(r - 1/2, 0 + 1) = (r - 1/2)2 + 12 - r2 = 5/4 - r &#123;如果r为整数，这里也可以用1 - r&#125; 当选择点 S = (xi - 1, yi + 1) 时 di+1 = di + -2xi+1 + 2yi+1 + 1 当选择点 T = (xi, yi + 1) 时 di+1 = di + 2yi+1 + 1 这里称di为决策点半径误差，我们通过di来判断绘制圆时实际选取的点，这里以上面的S和T点为例，如果di &gt; 0，说明e &lt; 0，曲线在中点M的左边，因此应该选择S点，反之应选择T点。 通过上述推导，我们已经得出di+1与di之间的关系，因此只需要设置一个初始决策点误差，就可计算出之后所有的决策点误差。 1234567891011121314151617181920212223242526272829303132333435363738394041void createCirclePoints(int x0, int y0, int radius)&#123; int x = radius; int y = 0; //起始决策点的半径误差值 d0 = f(x - 1/2, y + 1) = (r - 1/2)^2 + (0 + 1)^2 - r^2 = 5/4 - r //这里r是整数， 所以可以用1 - x替代 int decisionOver2 = 1 - x; // Decision criterion divided by 2 evaluated at x=r, y=0 while( y &lt;= x ) &#123; //只需要绘制八分之一个象限，其他象限可以根据圆的对称性得出 mMidPointCircleDiagram.addPoint(new Point(x + x0, y + y0, mPaintBlack)); // Octant 1 mMidPointCircleDiagram.addPoint(new Point(y + x0, x + y0, mPaintBlue));// Octant 2 mMidPointCircleDiagram.addPoint(new Point(-x + x0, y + y0, mPaintCyan));// Octant 4 mMidPointCircleDiagram.addPoint(new Point(-y + x0, x + y0, mPaintDarkGrey));// Octant 3 mMidPointCircleDiagram.addPoint(new Point(-x + x0, -y + y0, mPaintGreen));// Octant 5 mMidPointCircleDiagram.addPoint(new Point(-y + x0, -x + y0, mPaintMagenta));// Octant 6 mMidPointCircleDiagram.addPoint(new Point(x + x0, -y + y0, mPaintRed));// Octant 8 mMidPointCircleDiagram.addPoint(new Point(y + x0, -x + y0, mPaintYellow));// Octant 7 y++; if (decisionOver2&lt;=0) &#123; //下一个决策点的半径误差值，这里是y -&gt; y+1 decisionOver2 += 2 * y + 1; // Change in decision criterion for y -&gt; y+1 &#125; else &#123; x--; //下一个决策点的半径误差值，这里是y -&gt; y+1，x -&gt; x+1 decisionOver2 += 2 * (y - x) + 1; // Change for y -&gt; y+1, x -&gt; x-1 &#125; &#125;&#125; 参考文章Computer Graphics Tutorial - Circle Generation Algorithm wikipedia - Midpoint circle algorithm",
      "categories": [
        {
          "name": "Arithmetic",
          "slug": "Arithmetic",
          "permalink": "http://xionghaoo.github.io/categories/Arithmetic/"
        }
      ],
      "tags": []
    },
    {
      "title": "Windows平台部署Hexo到Github",
      "slug": "hexo deploy to github",
      "date": "2017-09-28T11:22:13.922Z",
      "updated": "2017-11-05T07:33:32.951Z",
      "comments": true,
      "path": "2017/09/28/hexo deploy to github/",
      "link": "",
      "permalink": "http://xionghaoo.github.io/2017/09/28/hexo deploy to github/",
      "excerpt": "",
      "text": "Hexo介绍，github pages是github提供的静态网页站点，每个账户可以生成一个，部署是在Windows平台下。 安装环境 Windows平台没有ssh命令，因此需要借助Git的Git Bash界面来进行相关配置 1、安装Hexo安装方法参考 Hexo官网安装教程现在你的电脑应该安装好了Node.js和Git，注意Git最好安装官网提供的Windows版本。 2、创建Github Pages创建方法参考 Github Pages官方教程创建完成后访问下xxx.github.io的网址，确保创建成功注意: 每一个账号只能有一个github pages 3、创建github SSH keys 这一步需要用到上面安装好的Git Bash，在任意文件夹下鼠标右键就可以打开。下面的命令全部在Git Bash CLI下完成。 进入github中your profile，选择SSH and GPG keys，需要在这里生成一个SSH key。 具体生成key的方法参考Generating a new SSH key and adding it to the ssh-agent创建新的Key时，下面三步直接按Enter创建完成会在C:\\Users\\you.ssh生成id_rsa和id_rsa.pub两个文 注意: Adding your SSH key to the ssh-agent这一步也要做，这是为ssh添加私钥。 具体添加key到github的方法参考Adding a new SSH key to your GitHub account这里只需要上面生成的id_rsa.pub作为公钥。添加完以后可以用ssh -vT git@github.com命令测试一下。看是否可以连接 相关软件安装完成，以及秘钥配置完成后，就可以进行部署了。 部署Hexo到Github Pages Hexo官方的部署文档写的实在太简单，简单到看不懂 部署Hexo到Github Pages请参考 How to use Hexo and deploy to GitHub Pages 如果出现下面的错误，最可能的原因是ssh的秘钥没有配置好，请再仔细检查配置过程，或者重新配置 123456789101112131415Please make sure you have the correct access rightsand the repository exists.FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.htmlError: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists. at ChildProcess.&lt;anonymous&gt; (I:\\blogs\\hexo\\pandazo.github.io\\node_modules\\hexo-util\\lib\\spawn.js:37:17) at emitTwo (events.js:106:13) at ChildProcess.emit (events.js:191:7) at ChildProcess.cp.emit (I:\\blogs\\hexo\\pandazo.github.io\\node_modules\\cross-spawn\\lib\\enoent.js:40:29) at maybeClose (internal/child_process.js:891:16) at Process.ChildProcess._handle.onexit (internal/child_process.js:226:5) 注意:repo这一项要写仓库的ssh地址，而不是https的。 配置成功后再打开你的github pags，见证奇迹的时刻！",
      "categories": [
        {
          "name": "Miscellaneous",
          "slug": "Miscellaneous",
          "permalink": "http://xionghaoo.github.io/categories/Miscellaneous/"
        }
      ],
      "tags": []
    },
    {
      "title": "Android动画",
      "slug": "Android Animation",
      "date": "2017-09-28T11:22:13.890Z",
      "updated": "2017-10-13T14:47:17.799Z",
      "comments": true,
      "path": "2017/09/28/Android Animation/",
      "link": "",
      "permalink": "http://xionghaoo.github.io/2017/09/28/Android Animation/",
      "excerpt": "",
      "text": "Google官方将动画分为三类，Property Animation、 View Animation、 Drawable Animation。前两个Android系统提供有相对应的动画框架，而Drawable Animation是你自己加载动画帧资源进行播放。这是针对单View动画，除了这些，Android还提供了一个Tansition的框架，它可以实现两个不同的View hierarchies之间转换，从而产生动画。5.0还引入的一些新的动画，比如Reveal Animation，Activity/Fragment之间的SharedElementAnimation。还有一种Physics-based Animation，这种动画遵循物理规律。 通常我们实现动画效果会通过两种方式，Java代码和XML动画文件。 下面介绍四大类动画 Property Animation、 View Animation、 Transition Aniamtion、Physics-based Animation. 关键数值 在介绍动画之前，需要先了解与动画有关的几个关键数值。 View的getTop(), getLeft() translateX, translateY, 这两个是View移动后的相对数值。 pivotX, pivotY, 这俩默认是View的中心，也是动画的中心点 Property Animation 属性动画，会实际修改View的属性 原理Property Animation 原理官方说明 上面是官方给的原理说明，里面有几个比较重要的概念 ValueAnimator， The ValueAnimator object keeps track of your animation’s timing, such as how long the animation has been running, and the current value of the property that it is animating. 跟踪动画的时间。 TypeEvaluator， defines how to calculate values for the property being animated. 它定义了如何计算在特定时间点的属性值。 TimeInterpolator，时间插补器。 Path 运动路径， 可以是直线或曲线，直线比较简单，这里就不做介绍了，曲线一般为Beizer(贝塞尔)曲线，在Transition动画中也有Bezier曲线，不过是xml文件中通过arcMotion指定，由系统自动生成。属性动画中常用到Path对象。 github demo - Curved-Fab-Reveal-Example Bezier曲线的计算公式：12x = (1–t)^3*P0 + 3(1–t)^2*t*P1 + 3(1–t)t^2*P2 + t^3*P3 y = (1–t)^3*P0 + 3(1–t)^2*t*P1 + 3(1–t)t^2*P2 + t^3*P3 其中P0表示起点，P3表示终点，P1表示控制点1，P2表示控制点2 ObjectAniamtor 对View的属性产生动画 ViewPropertyAnimator 便利的动画制作器 可以通过View.animate()方法获得 View Animation 不会对View的属性做出实际的修改 Transition Animation 通过Transition框架实现的动画 github上Transition Animation的Demo github - Material Animation SharedElementAniamtion 共享元素动画，关键类 blog - SharedElementAnimation Reveal Animation 圆形揭示动画 创建方法ViewAnimationUtils.createCircularReveal() Scene Animation 场景动画 关键类: TansitionManager Physics-based Animation 基于物理规律的动画 Physics-based Animation Animation Resources 动画资源，使用Xml文件实现动画 Animation Resources Interpolator Android自带的动画插补器 accelerate_cubic 三次 accelerate_decelerate 加减速 accelerate_quad 四次 accelerate_quint 五次 anticipate 开始向后，然后迅速向前 anticipate_overshoot 开始向后，然后迅速向前，冲过一点，然后返回到最终位置 bounce 在终点弹性变化 cycle 圆形轨迹播放动画 decelerate_cubic 三次方减速 decelerate_quad 四次减速 decelerate_quint 五次减速 fast_out_linear_in 迅速加速并保持 fast_out_slow_in 迅速加速但是缓慢减速 linear 变化量为常数 linear_out_slow_in 以一个非0速度缓慢减速 overshoot 迅速向前，冲过一点然后返回。 Duration Constant 动画常用的持续时间 R.integer.config_longAnimTime R.integer.config_mediumAnimTime R.integer.config_shortAnimTime",
      "categories": [
        {
          "name": "Android",
          "slug": "Android",
          "permalink": "http://xionghaoo.github.io/categories/Android/"
        }
      ],
      "tags": []
    }
  ]
}